<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>冷冷</title>
  
  
  <link href="https://www.520517.xyz/atom.xml" rel="self"/>
  
  <link href="https://www.520517.xyz/"/>
  <updated>2021-11-03T09:28:47.575Z</updated>
  <id>https://www.520517.xyz/</id>
  
  <author>
    <name>Leng Leng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Eureka使用</title>
    <link href="https://www.520517.xyz/2021/11/03/5976fbd0.html"/>
    <id>https://www.520517.xyz/2021/11/03/5976fbd0.html</id>
    <published>2021-11-03T08:48:37.000Z</published>
    <updated>2021-11-03T09:28:47.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h3><h5 id="什么是服务治理？"><a href="#什么是服务治理？" class="headerlink" title="什么是服务治理？"></a>什么是服务治理？</h5><p>在传统rpc远程调用框架中，管理每个服务与服务间的关系比较复杂，管理比较复杂，需要使用服务治理，服务之间依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册</p><h5 id="什么是服务注册与发现"><a href="#什么是服务注册与发现" class="headerlink" title="什么是服务注册与发现"></a>什么是服务注册与发现</h5><p>避免单点故障</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211103172612.png" alt="image-20211103172604948"></p><h5 id="Eureka俩个组件"><a href="#Eureka俩个组件" class="headerlink" title="Eureka俩个组件"></a>Eureka俩个组件</h5><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211103172837.png" alt="image-20211103172837284"></p><h5 id="CAP理论（eureka与zookeeper选型）"><a href="#CAP理论（eureka与zookeeper选型）" class="headerlink" title="CAP理论（eureka与zookeeper选型）"></a>CAP理论（eureka与zookeeper选型）</h5><p>C:Consistency，数据一致性<br>A:Availability，可用性，系统响应速度<br>P：Partition tolerance，分区容错性</p><p>1.Partition tolerance<br>分区容错性：大多数分布式系统，都分布在多个子网络，每个子网络就叫一个区，分区容错意思是：区之间通信可能失败，例如一个区在中国，一个区在美国，它们之间可能会无法通信<br>如下图，G1和G2是两个区的服务器，G1向G2发送一条消息，G2可能无法收到，系统设计时，必须考虑这种情况，但是一般情况下，分区容错无法避免，所以，我们认为在CAP理论中，P总是成立</p><p>2.Consistency<br>一致性：用户写和读的内容保持一致，例如：client写的是v1，读的就必须是v1，这就是数据一致</p><p>问题是，由于client可能想G1写数据，但是在G2读数据，由于G1和G2网络通信失败，造成数据不一致，这就不满足一致性</p><p>3.Availability<br>可用性：即只要服务器收到用户的请求，立刻做出回应，例如client无论向G1还是G2发起请求，只要服务器收到请求，立刻将数据相应给client</p><p>4.Consistency和Availability的矛盾<br>一致性和可用性不能同时成立，原因很简单，因为通信可能失败（分区容错性一定成立）<br>如果保证G1和G2数据一致性，那么客户端在向G1写数据时，G1必须将数据同步到G2，只有数据同步，才能保证数据的一致性，但是，在同步时，网络可能出现异常，此时client向G2发起读的请求，<br>如果要保持数据一致性，G2必须等到数据同步后才能响应给client，这样就不能保证可用性<br>如果要保证可用性，则G2需要立刻向client响应，但此时并未同步到G1的数据，那么响应的数据与client之前写的数据不一致<br>结论：CAP不能在分布式结构中同时存在，一般只能做到cp或者ap</p><p>5.eureka和zookeeper选型<br>强一致性（偏向cp）：任意时间，查看分布式结构的任意节点，数据都是一致的<br>弱一致性（最终一致性）（偏向ap）：任意时间，整体一致性未必一致，但是只要过了一段时间（毫秒、微秒）,整体一致性存在，可用性更高<br>eureka：偏向ap（对一致性要求较低，响应要求较高）<br>zookeeper:偏向cp，一致性要求较高，响应相对较低</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Eureka&quot;&gt;&lt;a href=&quot;#Eureka&quot; class=&quot;headerlink&quot; title=&quot;Eureka&quot;&gt;&lt;/a&gt;Eureka&lt;/h3&gt;&lt;h5 id=&quot;什么是服务治理？&quot;&gt;&lt;a href=&quot;#什么是服务治理？&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>joe博客使用</title>
    <link href="https://www.520517.xyz/2021/11/02/dff1e781.html"/>
    <id>https://www.520517.xyz/2021/11/02/dff1e781.html</id>
    <published>2021-11-02T04:01:21.000Z</published>
    <updated>2021-11-02T06:31:17.498Z</updated>
    
    <content type="html"><![CDATA[<h5 id="动态背景图"><a href="#动态背景图" class="headerlink" title="动态背景图"></a>动态背景图</h5><p>4可以</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;动态背景图&quot;&gt;&lt;a href=&quot;#动态背景图&quot; class=&quot;headerlink&quot; title=&quot;动态背景图&quot;&gt;&lt;/a&gt;动态背景图&lt;/h5&gt;&lt;p&gt;4可以&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>宝塔面板使用</title>
    <link href="https://www.520517.xyz/2021/11/01/94b0d4da.html"/>
    <id>https://www.520517.xyz/2021/11/01/94b0d4da.html</id>
    <published>2021-11-01T15:07:58.000Z</published>
    <updated>2021-11-03T01:31:34.612Z</updated>
    
    <content type="html"><![CDATA[<h3 id="宝塔面板使用"><a href="#宝塔面板使用" class="headerlink" title="宝塔面板使用"></a>宝塔面板使用</h3><h5 id="linux下安装宝塔"><a href="#linux下安装宝塔" class="headerlink" title="linux下安装宝塔"></a>linux下安装宝塔</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http:<span class="comment">//download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打开8888端口</p><h5 id="宝塔命令"><a href="#宝塔命令" class="headerlink" title="宝塔命令"></a>宝塔命令</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bt</span><br></pre></td></tr></table></figure><h5 id="宝塔的一些坑"><a href="#宝塔的一些坑" class="headerlink" title="宝塔的一些坑"></a>宝塔的一些坑</h5><p>例如如果你想给自己服务多添加一个域名但是你没有重启nginx它是不生效的 宝塔不会给我们自动重启nginx</p><h5 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h5><p>去dns域名解析 去域名下添加一条记录</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211102084810.png" alt="image-20211102084809937"></p><p>记录类型a  记录值自己服务器外网ip</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;宝塔面板使用&quot;&gt;&lt;a href=&quot;#宝塔面板使用&quot; class=&quot;headerlink&quot; title=&quot;宝塔面板使用&quot;&gt;&lt;/a&gt;宝塔面板使用&lt;/h3&gt;&lt;h5 id=&quot;linux下安装宝塔&quot;&gt;&lt;a href=&quot;#linux下安装宝塔&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>对象内存图</title>
    <link href="https://www.520517.xyz/2021/11/01/deba1672.html"/>
    <id>https://www.520517.xyz/2021/11/01/deba1672.html</id>
    <published>2021-11-01T14:06:06.000Z</published>
    <updated>2021-11-01T14:18:23.403Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对象内存图"><a href="#对象内存图" class="headerlink" title="对象内存图"></a>对象内存图</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;对象内存图&quot;&gt;&lt;a href=&quot;#对象内存图&quot; class=&quot;headerlink&quot; title=&quot;对象内存图&quot;&gt;&lt;/a&gt;对象内存图&lt;/h3&gt;</summary>
      
    
    
    
    <category term="学习" scheme="https://www.520517.xyz/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="https://www.520517.xyz/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>设计类和对象、定义类注意事项</title>
    <link href="https://www.520517.xyz/2021/11/01/9a32718b.html"/>
    <id>https://www.520517.xyz/2021/11/01/9a32718b.html</id>
    <published>2021-11-01T12:44:58.000Z</published>
    <updated>2021-11-02T13:16:03.070Z</updated>
    
    <content type="html"><![CDATA[<h3 id="设计类和对象、定义类注意事项"><a href="#设计类和对象、定义类注意事项" class="headerlink" title="设计类和对象、定义类注意事项"></a>设计类和对象、定义类注意事项</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101215744.png" alt="image-20211101212632119"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101213229.png" alt="image-20211101212912845"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xu.heima.createobject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 九月</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/11/01/21:33</span></span><br><span class="line"><span class="comment"> * 汽车类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;价格是：&quot;</span>+price+<span class="string">&quot;启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;价格是：&quot;</span>+price+<span class="string">&quot;跑的快&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xu.heima.createobject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 九月</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/11/01/21:33</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Car c = <span class="keyword">new</span> Car();</span><br><span class="line">        c.name = <span class="string">&quot;奔驰GLC&quot;</span>;</span><br><span class="line">         c.price=<span class="number">39.78</span>;</span><br><span class="line">        System.out.println(c.name);</span><br><span class="line">        System.out.println(c.price);</span><br><span class="line">        c.start();</span><br><span class="line">        c.run();</span><br><span class="line"></span><br><span class="line">        Car c2 = <span class="keyword">new</span> Car();</span><br><span class="line">        c2.name =<span class="string">&quot;小鹏汽车&quot;</span>;</span><br><span class="line">        c2.price = <span class="number">40.98</span>;</span><br><span class="line">        System.out.println(c2.name);</span><br><span class="line">        System.out.println(c2.price);</span><br><span class="line">        c2.start();</span><br><span class="line">        c2.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101214905.png" alt="image-20211101214905658"></p><h5 id="定义类补充"><a href="#定义类补充" class="headerlink" title="定义类补充"></a>定义类补充</h5><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101215640.png" alt="image-20211101215640427"></p><h6 id="成员变量初始默认值"><a href="#成员变量初始默认值" class="headerlink" title="成员变量初始默认值"></a>成员变量初始默认值</h6><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101215612.png" alt="image-20211101215612646"></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101220046.png" alt="image-20211101215841815"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;设计类和对象、定义类注意事项&quot;&gt;&lt;a href=&quot;#设计类和对象、定义类注意事项&quot; class=&quot;headerlink&quot; title=&quot;设计类和对象、定义类注意事项&quot;&gt;&lt;/a&gt;设计类和对象、定义类注意事项&lt;/h3&gt;&lt;p&gt;&lt;img src= &quot;/img/loadin</summary>
      
    
    
    
    <category term="学习" scheme="https://www.520517.xyz/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="https://www.520517.xyz/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>面向对象编程概述</title>
    <link href="https://www.520517.xyz/2021/11/01/5c66a5bd.html"/>
    <id>https://www.520517.xyz/2021/11/01/5c66a5bd.html</id>
    <published>2021-11-01T12:36:27.000Z</published>
    <updated>2021-11-03T11:10:38.904Z</updated>
    
    <content type="html"><![CDATA[<h3 id="面向对象编程概述"><a href="#面向对象编程概述" class="headerlink" title="面向对象编程概述"></a>面向对象编程概述</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101203754.png" alt="image-20211101203754385"></p><p>面向对象的一个过程</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101204942.png" alt="image-20211101204355789"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101204118.png" alt="image-20211101204043476"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;面向对象编程概述&quot;&gt;&lt;a href=&quot;#面向对象编程概述&quot; class=&quot;headerlink&quot; title=&quot;面向对象编程概述&quot;&gt;&lt;/a&gt;面向对象编程概述&lt;/h3&gt;&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-lazy-src=&quot;ht</summary>
      
    
    
    
    <category term="java" scheme="https://www.520517.xyz/categories/java/"/>
    
    
    <category term="java" scheme="https://www.520517.xyz/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList</title>
    <link href="https://www.520517.xyz/2021/11/01/48b6827e.html"/>
    <id>https://www.520517.xyz/2021/11/01/48b6827e.html</id>
    <published>2021-11-01T02:28:25.000Z</published>
    <updated>2021-11-01T14:28:36.609Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ArryLiist"><a href="#ArryLiist" class="headerlink" title="ArryLiist"></a>ArryLiist</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101171711.png" alt="image-20211101102948694"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101222110.png" alt="image-20211101222110303"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101222227.png" alt="image-20211101222227278"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101222318.png" alt="image-20211101222318307"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;ArryLiist&quot;&gt;&lt;a href=&quot;#ArryLiist&quot; class=&quot;headerlink&quot; title=&quot;ArryLiist&quot;&gt;&lt;/a&gt;ArryLiist&lt;/h3&gt;&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-lazy-src</summary>
      
    
    
    
    <category term="学习" scheme="https://www.520517.xyz/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="https://www.520517.xyz/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>常见算法</title>
    <link href="https://www.520517.xyz/2021/11/01/daae2fce.html"/>
    <id>https://www.520517.xyz/2021/11/01/daae2fce.html</id>
    <published>2021-11-01T01:40:04.000Z</published>
    <updated>2021-11-01T02:20:57.709Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常见算法"><a href="#常见算法" class="headerlink" title="常见算法"></a>常见算法</h3><h5 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h5><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101094244.png" alt="image-20211101094244387"></p><p>过程与冒泡不一样 冒泡是两两相比 选择是一一相比</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xu.heima.suanfa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 九月</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/11/01/9:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr =  &#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//循环0的时候从1开始故i+1</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i]&gt;arr[j])&#123;</span><br><span class="line">                    <span class="keyword">int</span> temp= arr[i];</span><br><span class="line">                    arr[i] = arr[j];</span><br><span class="line">                   arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h5><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101100549.png" alt="image-20211101100549848"></p><p>会先定义一个位置在最前一个位置在最后，计算出一半的距离，不需要太精确</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101100735.png" alt="image-20211101100735697"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101101936.png" alt="image-20211101100824508"></p><p>二分查找推荐使用一个方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;常见算法&quot;&gt;&lt;a href=&quot;#常见算法&quot; class=&quot;headerlink&quot; title=&quot;常见算法&quot;&gt;&lt;/a&gt;常见算法&lt;/h3&gt;&lt;h5 id=&quot;选择排序&quot;&gt;&lt;a href=&quot;#选择排序&quot; class=&quot;headerlink&quot; title=&quot;选择排序&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="算法" scheme="https://www.520517.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="学习" scheme="https://www.520517.xyz/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>日期时间</title>
    <link href="https://www.520517.xyz/2021/10/30/84be8891.html"/>
    <id>https://www.520517.xyz/2021/10/30/84be8891.html</id>
    <published>2021-10-30T01:14:03.000Z</published>
    <updated>2021-11-01T01:09:50.153Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211030091815.png" alt="image-20211030091815249"></p><h5 id="时间毫秒转日期对象"><a href="#时间毫秒转日期对象" class="headerlink" title="时间毫秒转日期对象"></a>时间毫秒转日期对象</h5><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211030092814.png" alt="image-20211030092814660"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211030092900.png" alt="image-20211030092900180"></p><h4 id="SimpleDateFormat类作用"><a href="#SimpleDateFormat类作用" class="headerlink" title="SimpleDateFormat类作用"></a>SimpleDateFormat类作用</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211030092944.png" alt="image-20211030092944843"></p><h5 id="格式化日期对象"><a href="#格式化日期对象" class="headerlink" title="格式化日期对象"></a>格式化日期对象</h5><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211030102610.png" alt="image-20211030102610246"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211030162013.png" alt="image-20211030162013805"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211030164356.png" alt="image-20211030164356157"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xu.heima.api.date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 九月</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/10/30/9:15</span></span><br><span class="line"><span class="comment"> * Date类处理时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始时间 结束时间</span></span><br><span class="line">        String ks = <span class="string">&quot;2020-11-11 00:00:00&quot;</span>;</span><br><span class="line">        String js = <span class="string">&quot;2020-11-11 00:10:00&quot;</span>;</span><br><span class="line"></span><br><span class="line">        String xiaojia =  <span class="string">&quot;2020-11-11 00:03:47&quot;</span>;</span><br><span class="line">        String xiaopi = <span class="string">&quot;2020-11-11 00:10:11&quot;</span>;</span><br><span class="line"></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把这四个都解析出来</span></span><br><span class="line">        Date d1 = sdf.parse(ks);</span><br><span class="line">        Date d2 = sdf.parse(js);</span><br><span class="line">        Date d3 = sdf.parse(xiaojia);</span><br><span class="line">        Date d4 = sdf.parse(xiaopi);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//after在什么什么之后 before在什么什么之前</span></span><br><span class="line">        <span class="keyword">if</span> (d3.after(d1)&amp;&amp;d3.before(d2))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小贾秒杀成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小贾秒杀失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (d4.after(d1)&amp;&amp;d4.before(d2))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小皮秒杀成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小皮秒杀失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Calendar概述"><a href="#Calendar概述" class="headerlink" title="Calendar概述"></a>Calendar概述</h5><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211030171433.png" alt="image-20211030164847226"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101090855.png" alt="image-20211101090855456"></p><p>获取日历信息 日历.get（Calendar.想获得的内容）</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101090838.png" alt="image-20211101090838532"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101090934.png" alt="image-20211101090934891"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Date&quot;&gt;&lt;a href=&quot;#Date&quot; class=&quot;headerlink&quot; title=&quot;Date&quot;&gt;&lt;/a&gt;Date&lt;/h3&gt;&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-lazy-src=&quot;https://cdn.jsdeli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JDK8开始新增日期API</title>
    <link href="https://www.520517.xyz/2021/10/30/efbb3ec5.html"/>
    <id>https://www.520517.xyz/2021/10/30/efbb3ec5.html</id>
    <published>2021-10-30T00:48:51.000Z</published>
    <updated>2021-11-01T10:12:04.375Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jdk新增api"><a href="#jdk新增api" class="headerlink" title="jdk新增api"></a>jdk新增api</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101091032.png" alt="image-20211101091032893"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;jdk新增api&quot;&gt;&lt;a href=&quot;#jdk新增api&quot; class=&quot;headerlink&quot; title=&quot;jdk新增api&quot;&gt;&lt;/a&gt;jdk新增api&lt;/h3&gt;&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-lazy-src=&quot;ht</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://www.520517.xyz/2021/10/30/2f57a694.html"/>
    <id>https://www.520517.xyz/2021/10/30/2f57a694.html</id>
    <published>2021-10-30T00:47:39.000Z</published>
    <updated>2021-10-30T00:54:11.943Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Arrays</title>
    <link href="https://www.520517.xyz/2021/10/30/4906e0fc.html"/>
    <id>https://www.520517.xyz/2021/10/30/4906e0fc.html</id>
    <published>2021-10-30T00:47:14.000Z</published>
    <updated>2021-11-01T01:39:02.501Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101091158.png" alt="image-20211101091158397"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101091503.png" alt="image-20211101091258252"></p><h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101091636.png" alt="image-20211101091636879"></p><p>降序排序不支持引用类型 自定义排序只能用引用类型 或者包装类</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211101093844.png" alt="image-20211101093843972"></p><p>没有重写toString方法 打印出的就是对象地址 重写之后打印出的就是对象内容</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Arrays类&quot;&gt;&lt;a href=&quot;#Arrays类&quot; class=&quot;headerlink&quot; title=&quot;Arrays类&quot;&gt;&lt;/a&gt;Arrays类&lt;/h3&gt;&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-lazy-src=&quot;https:</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring</title>
    <link href="https://www.520517.xyz/2021/10/30/6c92115f.html"/>
    <id>https://www.520517.xyz/2021/10/30/6c92115f.html</id>
    <published>2021-10-29T16:19:57.000Z</published>
    <updated>2021-10-30T00:56:51.212Z</updated>
    
    <content type="html"><![CDATA[<h3 id="spring框架概述"><a href="#spring框架概述" class="headerlink" title="spring框架概述"></a>spring框架概述</h3><ol><li><p>spring是轻量级的开源的javaee框架</p><p>轻量级：体积比较小 引入jar包比较少 不依赖其他组件自己可以单独使用</p></li><li><p>spring可以解决企业应用开发的复杂性</p></li><li><p>Spring有俩个核心部分：IOC和AOP</p><ul><li>IOC：控制反转，把创建对象过程交给Spring来管理</li><li>AOP：面向切面，不修改源代码进行功能增强</li></ul><ol start="4"><li>Spring特点</li></ol><ul><li>方便解耦，简化开发</li><li>AOP编程支持</li><li>方便程序测试</li><li>方便集成各种优秀框架</li><li>方便和其他框架进行整合</li><li>方便进行事务操作</li><li>降低API开发难度</li><li>JAVA源码是经典学习范例</li></ul><ol start="5"><li><p>入门案例</p><ol><li><p>下载spring5.x版本 ga代表稳定版</p></li><li><p>需要四个包 这是代表spring核心的四个部分beans context core expression 还有一个日志包</p></li><li><p>创建普通类，在这个类里创建一个普通方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><pre><code>   4. 创建spring配置文件，在配置文件中配置创建的对象     5. spring的配置文件使用xml格式 在src下直接创建        ![image-20210511171645714](https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20210511171645.png)        <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--创建一个bean标签--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置User对象创建  id是被获取时候写这个名字 class就是User的全路径包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xu.spring5.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>   6. 建立一个测试类测试    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.加载spring配置文件  在src下用ClassPathXmlApplicationContext 直接写配置文件名</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取配置创建的对象  user是配置里id起的名字   拿到需要创建的类</span></span><br><span class="line">        User user = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        user.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>### IOC1. ##### IOC底层原理   - 什么是IOC？     1. 控制反转，把对象创建和对象之间的调用过程，都交给spring进行管理     2. 使用IOC目的：为了耦合度降低     3. 做入门案例就是IOC实现   - IOC底层原理     1. xml解析、工厂模式、反射   - 画图   - ![image-20210512073622457](https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20210512073622.png)     1. 从原本的创建对象 到工厂模式 到通过xml配置文件 通过xml解析 地址值  然后反射创建对象 近一步降低耦合 （工厂模式如果包的位置移动了不方便更改）2. ##### IOC接口（BeanFactory）   - IOC思想基于IOC容器完成，IOC容器底层就是对象工厂。   - Spring提供IOC容器实现两种方式：     1. BeanFactory：IOC容器基本实现，是Spring内部的使用接口，不提供开发人员进行使用        *加载配置文件的时候不会创建对象，在获取对象（使用）才去创建对象     2. ApplicationContext：BeanFactory接口的子接口，提供更多更强大的功能，一般由开发人员进行使用        *在加载配置文件的时候会把配置文件对象进行创建     3. ApplicationContext接口有实现类        ![image-20210512091813332](https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20210512091813.png)        *Class这个是类路径 src下 file是盘符 在那个磁盘下IOC操作Bean管理（概念）1. 什么是Bean管理   1. Bean管理指的是俩个操作      1. Spring创建对象      2. Spring注入属性2. IOC操作Bean管理（基于注解）3. IOC操作Bean管理（基于xml方式）   1. 基于xml方式创建对象      ![image-20210512092829816](https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20210512092829.png)      1. 在Spring配置文件中，使用bean标签，标签里面添加对应属性，就可以实现对象创建      2. 在bean标签有很多属性，介绍常用的属性         1. id属性：唯一标识  类中获取配置对象时候要对应配置文件写的         2. class属性：类全路径（包类路径） 需要创建对象的那个类的全路径         3. 创建对象时候，默认也是执行无参构造方法完成对象创建         **1.无参构造运行是需要往上一级一级找无参，甚至找到object         2.如果其中一级只有有参，没有无参，会发生错误。但只有无参，没有有参一定不会出错。         3.在以后的Java开发中，若一个POJO类要有带参构造方法，要记得先写无参构造方法。防止类追溯时找不到上级，报错。**   2. 基于xml方式注入属性      1. DI:依赖注入         1. 使用set方法注入         <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: 九月</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/05/12/10:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 演示使用set方法注入属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建属性</span></span><br><span class="line">    <span class="keyword">private</span> String bname;</span><br><span class="line">    <span class="keyword">private</span> String bauthor;</span><br><span class="line">    <span class="comment">//创建属性对应的set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBname</span><span class="params">(String bname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bname = bname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBauthor</span><span class="params">(String bauthor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bauthor = bauthor;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>         ​    在spring配置文件配置对象创建，配置属性注入         <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Set 方法注入属性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xu.spring5.Book&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--使用property完成属性注入</span></span><br><span class="line"><span class="comment">          name：类里面属性名称</span></span><br><span class="line"><span class="comment">          value：向属性注入的值</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;幼儿园一班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bauthor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北慕&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>         ​    2.有参构造注入         ​    创建类，定义属性创建属性对应的有参构造方法         <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: 九月</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/05/12/18:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 使用有参构造注入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line">    <span class="keyword">private</span> String addres;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Orders</span><span class="params">(String oname, String addres)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oname = oname;</span><br><span class="line">        <span class="keyword">this</span>.addres = addres;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ordersTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(oname+<span class="string">&quot;::&quot;</span>+addres);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>         在spring配置文件配置对象创建，配置属性注入         <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--3有参构造注入属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xu.spring5.Orders&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;电脑&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;addres&quot;</span> <span class="attr">value</span>=<span class="string">&quot;手机&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>         3. p名称空间注入（简化set注入）            使用p名称空间注入，可以简化基于xml配置方式            1. 第一步添加p名称空间在配置文件中               ![image-20210512184957617](https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20210512184957.png)            2. 进行属性注入，在bean标签里面进行操作               <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 4 p命名空间注入--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xu.spring5.Book&quot;</span> <span class="attr">p:bname</span>=<span class="string">&quot;九阳神功&quot;</span> <span class="attr">p:bauthor</span>=<span class="string">&quot;易筋经&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>            3. 字面量、               - null值               <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xu.spring5.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用property完成属性注入</span></span><br><span class="line"><span class="comment">        name：类里面属性名称</span></span><br><span class="line"><span class="comment">        value：向属性注入的值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;幼儿园一班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bauthor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北慕&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>               - 属性值包含特殊符号               <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xu.spring5.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用property完成属性注入</span></span><br><span class="line"><span class="comment">        name：类里面属性名称</span></span><br><span class="line"><span class="comment">        value：向属性注入的值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;幼儿园一班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bauthor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;九月&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--属性值包含特殊符号</span></span><br><span class="line"><span class="comment">        1把&lt;&gt;进行转义 &amp;lt; &amp;gt;</span></span><br><span class="line"><span class="comment">        2把带特殊符号内容写到CDATA--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>               2.注入属性-外部bean               1. 创建俩个类service类和dao类               2. 在service调用dao里面的方法                 3. 在spring配置文件中配置                  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1 service和dao对象创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xu.spring5.service.UserService&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入userDao对象</span></span><br><span class="line"><span class="comment">            name属性值 类里面属性名称</span></span><br><span class="line"><span class="comment">            ref属性,创建userDao bean标签id值</span></span><br><span class="line"><span class="comment">            接口要用实现类的全路径  ref就是把外部对象注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xu.spring5.dao.UserDaoImpl&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>               3.注入属性-内部bean和级联赋值               1. 一对多关系：部门和员工                  一个部门有多个员工，一个员工属于一个部门                  部门是一，员工是多               2. 在实体类之间表示一对多关系，员工表示所属部门，使用对象类型属性进行表示.</code></pre><h4 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h4><h5 id="什么是aop？"><a href="#什么是aop？" class="headerlink" title="什么是aop？"></a>什么是aop？</h5><ol><li>面向切面编程（方面），利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</li><li>不通过修改源代码方式，在主干功能里面添加新功能</li></ol><p>分为两种一种有接口一种无接口</p><p>有接口的 是用jdk动态代理 通过创建接口实现类的代理对象</p><p>没有接口的 是用cglib动态代理 通过创建该类子类的代理对象</p><h5 id="AOP（JDK-动态代理）"><a href="#AOP（JDK-动态代理）" class="headerlink" title="AOP（JDK 动态代理）"></a>AOP（JDK 动态代理）</h5><ol><li>有一个Proxy类</li><li>里面有一个NewProxyInstance方法</li><li>方法里面有三个参数，类加载器，接口，写增强的部分</li></ol><h5 id="JDK动态代理代码"><a href="#JDK动态代理代码" class="headerlink" title="JDK动态代理代码"></a>JDK动态代理代码</h5><p>创建一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring5;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: 九月</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/06/08/16:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(String id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写一个实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring5;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: 九月</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/06/08/16:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;spring框架概述&quot;&gt;&lt;a href=&quot;#spring框架概述&quot; class=&quot;headerlink&quot; title=&quot;spring框架概述&quot;&gt;&lt;/a&gt;spring框架概述&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;spring是轻量级的开源的javaee框架&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="学习" scheme="https://www.520517.xyz/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>PO,BO,VO和POJO的区别</title>
    <link href="https://www.520517.xyz/2021/10/30/bf1a0070.html"/>
    <id>https://www.520517.xyz/2021/10/30/bf1a0070.html</id>
    <published>2021-10-29T16:12:03.000Z</published>
    <updated>2021-10-30T00:56:18.622Z</updated>
    
    <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211030001224.png" alt="image-20210517192239037"></p><p>po 持久层对象 与数据库字段一一对应</p><p>bo 业务层对象 基本不要</p><p>vo 用于controller返回到页面  </p><p>do  领域驱动 领域对象一一对应的字段</p><p>dto 数据传输对象 一般用在远程调用的时候  dubbo端口调用 返回一个dto对象</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-lazy-src=&quot;https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20211030001224.png&quot; alt=&quot;image-20210517192239</summary>
      
    
    
    
    <category term="学习" scheme="https://www.520517.xyz/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="https://www.520517.xyz/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo</title>
    <link href="https://www.520517.xyz/2021/10/30/f6253398.html"/>
    <id>https://www.520517.xyz/2021/10/30/f6253398.html</id>
    <published>2021-10-29T16:10:54.000Z</published>
    <updated>2021-10-30T00:54:25.146Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h4><h5 id="什么是分布式？"><a href="#什么是分布式？" class="headerlink" title="什么是分布式？"></a>什么是分布式？</h5><p>分布式就是若干计算机的一个集合，站在用户角度来说我们在jd购物 我们感觉这是单个系统，其实这是有很多计算机组成而来的一个系统</p><p>dubbo</p><p>是用来分布式治理的一个框架</p><h5 id="单一应用架构"><a href="#单一应用架构" class="headerlink" title="单一应用架构"></a>单一应用架构</h5><p>需要每次重新打包 扩展不容易</p><h5 id="垂直架构"><a href="#垂直架构" class="headerlink" title="垂直架构"></a>垂直架构</h5><p>垂直是单一架构的进化 单个大应用变成多个小应用进行拆分  应用不可能完全独立，想要交互</p><h5 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h5><p>把核心业务抽取出来</p><h5 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h5><p>远程过程调用</p><h5 id="流动计算架构"><a href="#流动计算架构" class="headerlink" title="流动计算架构"></a>流动计算架构</h5><p>soa</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Dubbo&quot;&gt;&lt;a href=&quot;#Dubbo&quot; class=&quot;headerlink&quot; title=&quot;Dubbo&quot;&gt;&lt;/a&gt;Dubbo&lt;/h4&gt;&lt;h5 id=&quot;什么是分布式？&quot;&gt;&lt;a href=&quot;#什么是分布式？&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="学习" scheme="https://www.520517.xyz/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="https://www.520517.xyz/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecurity框架</title>
    <link href="https://www.520517.xyz/2021/10/30/fdc17464.html"/>
    <id>https://www.520517.xyz/2021/10/30/fdc17464.html</id>
    <published>2021-10-29T16:07:49.000Z</published>
    <updated>2021-10-30T00:57:17.930Z</updated>
    
    <content type="html"><![CDATA[<h4 id="SpringSecurity框架"><a href="#SpringSecurity框架" class="headerlink" title="SpringSecurity框架"></a>SpringSecurity框架</h4><p>权限框架</p><p>身份验证与授权</p><h5 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h5><p>建立个boot项目把静态资源放进去  然后配置个清除缓存</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20210606090411.png" alt="image-20210606090410871"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.thymeleaf.cache=false不起作用</span></span><br><span class="line"><span class="string">配置是清除缓存，实现热部署。也就是修改了html后不用重启，刷新页面就能看到效果。</span></span><br><span class="line"><span class="string">修改完html后一定要ctrl+f9重新build一下。再回到浏览器刷新，就能看到效果了</span></span><br></pre></td></tr></table></figure><p>controller完成跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xu.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: 九月</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/06/03/23:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/index&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toLogin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toLogin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/login1`                                                                                                                                       &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level1/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">level1</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;level1/&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level2/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">level2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;level2/&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level3/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">level3</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;level3/&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>Spring Security 是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可<br>以实现强大的Web安全控制，对于安全控制，我们仅需要引入 spring-boot-starter-security 模<br>块，进行少量的配置，即可实现强大的安全管理！<br>记住几个类：<br>WebSecurityConfigurerAdapter： 自定义Security策略<br>AuthenticationManagerBuilder：自定义认证策略<br>@EnableWebSecurity：开启WebSecurity模式<br>Spring Security的两个主要目标是 “认证” 和 “授权”（访问控制）。<br>“认证”（Authentication）<br>身份验证是关于验证您的凭据，如用户名/用户ID和密码，以验证您的身份。<br>身份验证通常通过用户名和密码完成，有时与身份验证因素结合使用。<br>“授权” （Authorization）<br>授权发生在系统成功验证您的身份后，最终会授予您访问资源（如信息，文件，数据库，资金，位置，<br>几乎任何内容）的完全权限。<br>这个概念是通用的，而不是只在Spring Security 中存在。</p><p>导入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>编写配置类 这个是被重写的父类有定义好的 按照写法写就行了</p><p>授权</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//链式编程</span></span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//请求授权的规则</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line">        <span class="comment">//没有权限默认会跳转到登录页面,开启登录的页面</span></span><br><span class="line">        http.formLogin();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>认证 可以从内存也可以从数据库  .withUser()哪个用户  .roles（）角色（可以理解为拥有的权限）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="comment">//密码编码 PasswordEncoder  需要先加密 再写密码</span></span><br><span class="line">    <span class="comment">//Spring security 5.0中新增了多种加密方式，也改变了密码的格式。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder() &#123;</span><br><span class="line">        &#125;)</span><br><span class="line">                .withUser(<span class="string">&quot;xuhui&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;root&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;jiuyue&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注销 编写前端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//链式编程</span></span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//请求授权的规则</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line">        <span class="comment">//没有权限默认会跳转到登录页面,开启登录的页面</span></span><br><span class="line">        http.formLogin();</span><br><span class="line">         <span class="comment">//开启注销功能 .logoutUrl返回到登录界面  .logoutUrl注销跳转到首页</span></span><br><span class="line">        <span class="comment">// http.logout().logoutSuccessUrl(&quot;/&quot;);  </span></span><br><span class="line">        http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>想显示这个权限能看到的 其他权限的东西看不到</p><p>导入依赖thymeleaf与spring整合包thymeleaf-extras-springsecurity5</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.thymeleaf.extras&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;thymeleaf-extras-springsecurity5&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.0.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>导入命名空间 thymeleaf-extras-springsecurity5 是导入依赖导的包名 如果是spring4就写4</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20210606110047.png" alt="image-20210606110047771"></p><p>判断如果登录了显示注销</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--如果未登录,显示登录--&gt;</span><br><span class="line">        &lt;div sec:authorize=<span class="string">&quot;!isAuthenticated()&quot;</span>&gt;</span><br><span class="line">            &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;item&quot;</span> th:href=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span><br><span class="line">                &lt;i class=&quot;address card icon&quot;&gt;&lt;/i&gt; 登录</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div sec:authorize=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span><br><span class="line">            &lt;!--如果登录显示注销--&gt;</span><br><span class="line">            &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;item&quot;</span> th:href=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span><br><span class="line">                &lt;i class=&quot;sign-out icon&quot;&gt;&lt;/i&gt; 注销</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>登出失败的可能存在的原因csrf跨站网络工具 所以出现404页面  为了安全也可以直接用post 不然只能关闭csrf了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//链式编程</span></span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//请求授权的规则</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line">        <span class="comment">//没有权限默认会跳转到登录页面,开启登录的页面</span></span><br><span class="line">        http.formLogin();</span><br><span class="line">        <span class="comment">//防止网站攻击 csrf</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        <span class="comment">//开启注销功能</span></span><br><span class="line">        http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>想显示这个权限能看到的 其他权限的东西看不到</p><p>在前端页面设置  菜单根据用户角色的权限动态的实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui three column stackable grid&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip1&#x27;)&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 1<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/myGitxb/picpigo/img/20210606112659.png" alt="image-20210606112658960"></p><p>记住我 默认保存两周  下面的根据自己需求选择语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//链式编程</span></span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//请求授权的规则</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line">         <span class="comment">//没有权限默认会跳转到登录页面,开启登录的页面,开启后会替换掉自带的登录页面 需要和前端登录页面写对应的 这和controller那上面@RequestMapping写成一样的 controller去找登录页面 这个页面替换成登录页面 前端登录   访问这个</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//这样写loginPage里需要 controller方法上与前端一致</span></span><br><span class="line">       http.formLogin().loginPage(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line">       <span class="comment">//前端想直接去login页面也可以 那就加个loginProcessingUrl 这里是指定前端查找的  loginPage是后端controller 方法上定义查找的</span></span><br><span class="line">       http.formLogin().loginPage(<span class="string">&quot;/toLogin&quot;</span>).loginProcessingUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//默认的用户名与密码参数是 username password 也可以自定义 因为前端如果随便命名不一致的话 后端需要指定下</span></span><br><span class="line">        http.formLogin().loginPage(<span class="string">&quot;/toLogin&quot;</span>).usernameParameter(<span class="string">&quot;user&quot;</span>).passwordParameter(<span class="string">&quot;pwd&quot;</span>).loginProcessingUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">        </span><br><span class="line">       <span class="comment">//防止网站攻击 csrf</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        <span class="comment">//开启注销功能</span></span><br><span class="line">        http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启记住我功能</span></span><br><span class="line">        http.rememberMe();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//记住我 自定义接收前端的参数.rememberMeParameter(&quot;remember&quot;);  括号内内容是前端定义的</span></span><br><span class="line">         http.rememberMe().rememberMeParameter(<span class="string">&quot;remember&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;SpringSecurity框架&quot;&gt;&lt;a href=&quot;#SpringSecurity框架&quot; class=&quot;headerlink&quot; title=&quot;SpringSecurity框架&quot;&gt;&lt;/a&gt;SpringSecurity框架&lt;/h4&gt;&lt;p&gt;权限框架&lt;/p&gt;
&lt;p&gt;身份</summary>
      
    
    
    
    <category term="框架" scheme="https://www.520517.xyz/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="学习" scheme="https://www.520517.xyz/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Stream流的使用</title>
    <link href="https://www.520517.xyz/2021/10/30/229e9b96.html"/>
    <id>https://www.520517.xyz/2021/10/30/229e9b96.html</id>
    <published>2021-10-29T16:03:48.000Z</published>
    <updated>2021-10-30T00:57:27.931Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数式介绍："><a href="#函数式介绍：" class="headerlink" title="函数式介绍："></a>函数式介绍：</h2><p>简单来说：函数式编程就是把我们的函数(方法)作为参数传递、调用等</p><p>例子：自定义函数式接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可序列化的Functional</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;achao1441470436@gmail.com&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021/6/13 16:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Func</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们定义一个类可以去实现该接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可序列化的函数式接口实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;achao1441470436@gmail.com&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021/6/13 16:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FuncImpl</span> <span class="keyword">implements</span> <span class="title">Func</span>&lt;<span class="title">Object</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o 参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此为止，大家应该都能看懂</p><p>这里就有个问题：假设我有很多的地方需要不同的类去实现<code>Func</code>，我就得每次都去写这么一个类，然后实现该接口并重写方法</p><p>这样很麻烦！因此我们使用匿名内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;String, Integer&gt; func = <span class="keyword">new</span> Func&lt;String, Integer&gt;() &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s 参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们可以看到，使用了匿名内部类后不用每次去新建这个类了，只需要在调用的地方，<code>new</code>一下接口，创建一个匿名内部类即可</p><p>但这样还有个问题，我们每次都要写这么一大堆，特别麻烦</p><p>由此而生，我们有了<code>lambda</code>这种简写的形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;String, String&gt; func1 = (String s) -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果只有一行，我们可以省略掉中括号以及<code>return</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;String, String&gt; func2 = (String s) -&gt; s.toUpperCase();</span><br></pre></td></tr></table></figure><p>我们可以省略掉后边的参数类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;String, String&gt; func3 = s -&gt; s.toUpperCase();</span><br></pre></td></tr></table></figure><p>如果我们满足特定的形式，我们还可以使用双冒号的形式缩写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;String, String&gt; func4 = String::toUpperCase;</span><br></pre></td></tr></table></figure><p>这里除了我们的<code>参数-&gt;返回值</code>写法：<code>s-&gt;s.toUpperCase()</code>，还有很多种</p><p>例如无参数带返回值写法<code>()-&gt;&quot;yes&quot;</code>、无参无返回值写法<code>()-&gt;&#123;&#125;</code>等等</p><p>而双冒号这种写法有如下几种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ruben;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.function.IntFunction;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 语法糖——双冒号写法::</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;achao1441470436@gmail.com&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021/7/1 17:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodReferences</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">staticSupplier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;whatever&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">instanceSupplier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;whatever&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">anonymousInstanceFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;whatever&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 引用构造函数</span></span><br><span class="line">        Supplier&lt;MethodReferences&gt; conSup = () -&gt; <span class="keyword">new</span> MethodReferences();</span><br><span class="line">        conSup = MethodReferences::<span class="keyword">new</span>;</span><br><span class="line">        <span class="comment">// 数组构造函数引用</span></span><br><span class="line">        IntFunction&lt;<span class="keyword">int</span>[]&gt; intFunction = value -&gt; <span class="keyword">new</span> <span class="keyword">int</span>[value];</span><br><span class="line">        <span class="comment">// intFunc == new int[20];</span></span><br><span class="line">        <span class="keyword">int</span>[] intFuncResult = intFunction.apply(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">// 引用静态方法</span></span><br><span class="line">        Supplier&lt;Object&gt; statSup = () -&gt; staticSupplier();</span><br><span class="line">        statSup = MethodReferences::staticSupplier;</span><br><span class="line">        Object statSupResult = statSup.get();</span><br><span class="line">        <span class="comment">// 引用特定对象的实例方法</span></span><br><span class="line">        Supplier&lt;Object&gt; instSup = <span class="keyword">new</span> MethodReferences()::instanceSupplier;</span><br><span class="line">        instSup = <span class="keyword">new</span> MethodReferences()::instanceSupplier;</span><br><span class="line">        Object instSupResult = instSup.get();</span><br><span class="line">        <span class="comment">// 引用特定类型的任意对象的实例方法</span></span><br><span class="line">        Function&lt;MethodReferences, Object&gt; anonInstFunc = streamDemo -&gt; streamDemo.anonymousInstanceFunction();</span><br><span class="line">        anonInstFunc = MethodReferences::anonymousInstanceFunction;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顺便放几个常用的函数式接口写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ruben;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 常用的几个函数式接口写法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;achao1441470436@gmail.com&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021/7/1 17:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Usual</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Consumer&lt;Object&gt; <span class="title">consumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 有参数无返回值</span></span><br><span class="line">        <span class="keyword">return</span> o -&gt; &#123;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Function&lt;Integer, Object&gt; <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 有参数有返回值</span></span><br><span class="line">        <span class="keyword">return</span> o -&gt; o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Predicate&lt;Object&gt; <span class="title">predicate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 有参数，返回值为boolean</span></span><br><span class="line">        <span class="keyword">return</span> o -&gt; <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Supplier&lt;Object&gt; <span class="title">supplier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 无参数有返回值</span></span><br><span class="line">        <span class="keyword">return</span> Object::<span class="keyword">new</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BiConsumer&lt;String, Integer&gt; <span class="title">biConsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 俩参数无返回值</span></span><br><span class="line">        <span class="keyword">return</span> (q, o) -&gt; &#123;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BiFunction&lt;Integer, Long, BigDecimal&gt; <span class="title">biFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 俩参数，有返回值</span></span><br><span class="line">        <span class="keyword">return</span> (q, o) -&gt; <span class="keyword">new</span> BigDecimal(q).add(BigDecimal.valueOf(o));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UnaryOperator&lt;Object&gt; <span class="title">unaryOperator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 一个参数，返回值类型和参数一样</span></span><br><span class="line">        <span class="keyword">return</span> q -&gt; q;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BinaryOperator&lt;Object&gt; <span class="title">binaryOperator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 俩参数和返回值类型保持一致</span></span><br><span class="line">        <span class="keyword">return</span> (a, o) -&gt; a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Stream介绍"><a href="#Stream介绍" class="headerlink" title="Stream介绍"></a>Stream介绍</h2><p><code>Java 8 API</code>添加了一个新的抽象称为流<code>Stream</code>，可以让你以一种声明的方式处理数据。方法全是传入函数作为参数，来达到我们的目的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明式编程是告诉计算机需要计算“什么”而不是“如何”去计算</span></span><br><span class="line"><span class="comment">// 现在，我想要一个List，包含3个数字6</span></span><br><span class="line">List&lt;Integer&gt; sixSixSix =</span><br><span class="line">        <span class="comment">// 我想要：</span></span><br><span class="line">        Stream</span><br><span class="line">                <span class="comment">// 6</span></span><br><span class="line">                .generate(() -&gt; <span class="number">6</span>)</span><br><span class="line">                <span class="comment">// 3个</span></span><br><span class="line">                .limit(<span class="number">3</span>)</span><br><span class="line">                <span class="comment">// 最后收集起来转为List</span></span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">sixSixSix.forEach(System.out::print);</span><br></pre></td></tr></table></figure><p><code>Stream</code> 使用一种类似用 <code>SQL</code> 语句从数据库查询数据的直观方式来提供一种对 <code>Java</code> 集合运算和表达的高阶抽象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 就像sql里的排序、截取</span></span><br><span class="line"><span class="comment">// 我要把传入的list逆序，然后从第五个(元素下标为4)开始取值，取4条</span></span><br><span class="line">abc = abc.stream()</span><br><span class="line">        <span class="comment">// 排序(按照自然顺序的逆序)</span></span><br><span class="line">        .sorted(Comparator.reverseOrder())</span><br><span class="line">        <span class="comment">// 从下标为4开始取值</span></span><br><span class="line">        .skip(<span class="number">4</span>)</span><br><span class="line">        <span class="comment">// 取4条</span></span><br><span class="line">        .limit(<span class="number">4</span>)</span><br><span class="line">        <span class="comment">// 最后收集起来转为List</span></span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">System.out.println(<span class="string">&quot;我要把传入的list逆序，然后从第五个(元素下标为4)开始取值，取4条&quot;</span>);</span><br><span class="line">abc.forEach(System.out::print);</span><br><span class="line">System.out.println();</span><br></pre></td></tr></table></figure><p><code>Stream API</code>可以极大提高<code>Java</code>程序员的生产力，让程序员写出高效率、干净、简洁的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 老办法实现一个list，存储3个6</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> [6, 6, 6]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">oldSix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 老办法</span></span><br><span class="line">    List&lt;Integer&gt; sixSixSix = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">    sixSixSix.add(<span class="number">6</span>);</span><br><span class="line">    sixSixSix.add(<span class="number">6</span>);</span><br><span class="line">    sixSixSix.add(<span class="number">6</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;老办法实现一个list，存储3个6&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Integer integer : sixSixSix) &#123;</span><br><span class="line">        System.out.print(integer);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="keyword">return</span> sixSixSix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新方法实现一个list，存储3个6</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> [6, 6, 6]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">newSix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; sixSixSix = Stream.generate(() -&gt; <span class="number">6</span>).limit(<span class="number">3</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">&quot;新方法实现一个list，存储3个6&quot;</span>);</span><br><span class="line">    sixSixSix.forEach(System.out::print);</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="keyword">return</span> sixSixSix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种风格将要处理的元素集合看作一种流， 流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选， 排序，聚合等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 管道中传输，节点中处理</span></span><br><span class="line"><span class="keyword">int</span> pipe = abc.stream()</span><br><span class="line">        <span class="comment">// 筛选</span></span><br><span class="line">        .filter(i -&gt; i &gt; <span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        .sorted(Comparator.reverseOrder())</span><br><span class="line">        .mapToInt(Object::hashCode)</span><br><span class="line">        <span class="comment">// 聚合</span></span><br><span class="line">        .sum();</span><br><span class="line">System.out.println(<span class="string">&quot;将26个字母组成的集合过滤出大于&#x27;G&#x27;的，逆序，再获取hashCode值，进行求和&quot;</span>);</span><br><span class="line">System.out.println(pipe);</span><br></pre></td></tr></table></figure><p>元素流在管道中经过中间操作（<code>intermediate operation</code>）的处理，最后由最终操作(<code>terminal operation</code>)得到前面处理的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将26个大写字母Character集合转换为String然后转换为小写字符</span></span><br><span class="line">List&lt;String&gt; terminalOperation = abc.stream()</span><br><span class="line">        <span class="comment">// 中间操作（intermediate operation）</span></span><br><span class="line">        .map(String::valueOf).map(String::toLowerCase)</span><br><span class="line">        <span class="comment">// 最终操作</span></span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">System.out.println(<span class="string">&quot;26个大写字母Character集合，转换成String然后转换为小写字符，收集起来&quot;</span>);</span><br><span class="line">terminalOperation.forEach(System.out::print);</span><br><span class="line">System.out.println();</span><br></pre></td></tr></table></figure><h2 id="什么是-Stream？"><a href="#什么是-Stream？" class="headerlink" title="什么是 Stream？"></a>什么是 Stream？</h2><p><code>Stream</code>（流）是一个来自数据源的元素队列并支持聚合操作</p><ul><li>元素是特定类型的对象，形成一个队列。<code> Java</code>中的<code>Stream</code>并不会存储元素，而是按需计算。</li><li><strong>数据源</strong> 流的来源。 可以是集合，数组，<code>I/O channel</code>， 产生器<code>generator</code> 等。</li><li><strong>聚合操作</strong> 类似<code>SQL</code>语句一样的操作， 比如<code>filter</code>, <code>map</code>, <code>reduce</code>,<code> find</code>,<code> match</code>,<code> sorted</code>等。</li></ul><p>和以前的<code>Collection</code>操作不同， <code>Stream</code>操作还有两个基础的特征：</p><ul><li><strong>Pipelining</strong>: 中间操作都会返回流对象本身。 这样多个操作可以串联成一个管道， 如同流式风格（<code>fluent style</code>）。 这样做可以对操作进行优化， 比如延迟执行(<code>laziness</code>)和短路( <code>short-circuiting</code>)。</li><li><strong>内部迭代</strong>： 以前对集合遍历都是通过<code>Iterator</code>或者<code>For-Each</code>的方式, 显式的在集合外部进行迭代， 这叫做外部迭代。 <code>Stream</code>提供了内部迭代的方式， 通过访问者模式(<code>Visitor</code>)实现。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;函数式介绍：&quot;&gt;&lt;a href=&quot;#函数式介绍：&quot; class=&quot;headerlink&quot; title=&quot;函数式介绍：&quot;&gt;&lt;/a&gt;函数式介绍：&lt;/h2&gt;&lt;p&gt;简单来说：函数式编程就是把我们的函数(方法)作为参数传递、调用等&lt;/p&gt;
&lt;p&gt;例子：自定义函数式接口&lt;/p</summary>
      
    
    
    
    <category term="学习" scheme="https://www.520517.xyz/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="https://www.520517.xyz/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Lambda</title>
    <link href="https://www.520517.xyz/2021/10/30/d431fab4.html"/>
    <id>https://www.520517.xyz/2021/10/30/d431fab4.html</id>
    <published>2021-10-29T16:01:49.000Z</published>
    <updated>2021-10-30T00:55:30.011Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h4><p>是一个匿名函数，可以理解为一段可传递的代码</p><p>只能简化函数式接口的匿名内部类的写法 两种创建方法</p><p>接口名字 接口创建的变量名字 （）-&gt;{接口内方法的重写}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xu.heima.jdk8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 九月</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/10/28/9:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Swimming s1 = () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;老师游泳贼6&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        go(s1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">        go(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;学生游泳很开心&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">(Swimming s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">        s.swin();</span><br><span class="line">        System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span> <span class="comment">//这个注解可以判断是否是函数式接口 一个接口并且只能有一个抽象方法</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Swimming</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swin</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>12分钟</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Lambda&quot;&gt;&lt;a href=&quot;#Lambda&quot; class=&quot;headerlink&quot; title=&quot;Lambda&quot;&gt;&lt;/a&gt;Lambda&lt;/h4&gt;&lt;p&gt;是一个匿名函数，可以理解为一段可传递的代码&lt;/p&gt;
&lt;p&gt;只能简化函数式接口的匿名内部类的写法 两种创建方法</summary>
      
    
    
    
    <category term="学习" scheme="https://www.520517.xyz/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="https://www.520517.xyz/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper</title>
    <link href="https://www.520517.xyz/2021/10/30/b829b66a.html"/>
    <id>https://www.520517.xyz/2021/10/30/b829b66a.html</id>
    <published>2021-10-29T16:00:43.000Z</published>
    <updated>2021-10-30T00:57:47.954Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h4><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p>Zookeeper是一个开源的分布式的，为分布式框架提供协议服务的Apache项目</p><h5 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h5><p>设计模式角度理解是一个基于观察者模式设计的分布式管理框架 一个人干活一个人监督</p><p>Zookeeper=文件系统+通知机制 存储服务器的一些信息</p><h5 id="Zookeeper特点"><a href="#Zookeeper特点" class="headerlink" title="Zookeeper特点"></a>Zookeeper特点</h5><p>Zookeeper：一个领导多个跟随者</p><p>集群中半数以上节点存活就能正常运行 适合奇数按照</p><p>全局数据一致，每个server保存一份相同的数据副本</p><p>更新请求顺序执行</p><p>数据更新原子性 要么成功要么失败</p><p>实时性，在一定时间范围内，客户端读到最新数据</p><h5 id="Zookeeper数据结构"><a href="#Zookeeper数据结构" class="headerlink" title="Zookeeper数据结构"></a>Zookeeper数据结构</h5><p>树形结构，每个节点叫做ZNode 默认存储1MB的数据 能存储的数据量小</p><h5 id="Zookeeper解决哪些问题"><a href="#Zookeeper解决哪些问题" class="headerlink" title="Zookeeper解决哪些问题"></a>Zookeeper解决哪些问题</h5><p>统一命名服务 域名比IP好记</p><p>统一配置管理 分布式环境下 同步文件常见 一般要求一个集群中所有配置信息一致，对配置文件修改，快速同步。  配置管理可以交给Zookeeper实现 ，可将配置问文件写入到Zookeeper上的一个Znode节点  每个服务器监听这个节点，一旦Zookeeper发送修改通知各个客户端服务器</p><h5 id="统一集群管理"><a href="#统一集群管理" class="headerlink" title="统一集群管理"></a>统一集群管理</h5><p>实时监控节点状态 可将节点信息写入Zookeeper上的一个ZNode</p><p>监听这个ZNode可获取它的实时状态变化。</p><h5 id="客户端动态上下线"><a href="#客户端动态上下线" class="headerlink" title="客户端动态上下线"></a>客户端动态上下线</h5><p>服务器在Zookeeper中注册自己 Zookeeper通知客户端</p><h5 id="软负载均衡"><a href="#软负载均衡" class="headerlink" title="软负载均衡"></a>软负载均衡</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Zookeeper&quot;&gt;&lt;a href=&quot;#Zookeeper&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper&quot;&gt;&lt;/a&gt;Zookeeper&lt;/h4&gt;&lt;h5 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="学习" scheme="https://www.520517.xyz/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="https://www.520517.xyz/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>日志技术</title>
    <link href="https://www.520517.xyz/2021/10/29/d6d83cd2.html"/>
    <id>https://www.520517.xyz/2021/10/29/d6d83cd2.html</id>
    <published>2021-10-29T15:55:48.000Z</published>
    <updated>2021-10-30T00:53:15.160Z</updated>
    
    <content type="html"><![CDATA[<p>nginx的错误日志 error.log</p><p>日志门面<br>JCL、slf4j<br>日志实现<br>JUL、logback、log4j、log4j2</p><h4 id="JUL-学习"><a href="#JUL-学习" class="headerlink" title="JUL 学习"></a>JUL 学习</h4><h5 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h5><p>创建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jiuyue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 九月</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/08/19/22:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JULTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuick</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建日志记录器对象  name一般是当前类全限路径名字</span></span><br><span class="line">        Logger logger = Logger.getLogger(<span class="string">&quot; com.jiuyue.JULTest&quot;</span> );</span><br><span class="line">        <span class="comment">// 2.日志记录输出</span></span><br><span class="line">        logger.info(<span class="string">&quot;hello jul&quot;</span>);</span><br><span class="line">        <span class="comment">//通用方法进行日志记录</span></span><br><span class="line">        logger.log(Level.INFO, <span class="string">&quot;info msg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过占位符 方式输出变量值</span></span><br><span class="line">        String name = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">        Integer age = <span class="number">18</span>;</span><br><span class="line">        logger.log(Level.INFO,<span class="string">&quot;用户信息:&#123;0&#125;,&#123;1&#125;&quot;</span>,<span class="keyword">new</span> Object[]&#123;name,age&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h5><ul><li>java.util.logging.Level中定义了日志的级别：<br>SEVERE（最高值）<br>WARNING<br>INFO （默认级别）<br>CONFIG<br>FINE<br>FINER<br>FINEST（最低值）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//日志级别</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLogLevel</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;nginx的错误日志 error.log&lt;/p&gt;
&lt;p&gt;日志门面&lt;br&gt;JCL、slf4j&lt;br&gt;日志实现&lt;br&gt;JUL、logback、log4j、log4j2&lt;/p&gt;
&lt;h4 id=&quot;JUL-学习&quot;&gt;&lt;a href=&quot;#JUL-学习&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="学习" scheme="https://www.520517.xyz/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="https://www.520517.xyz/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
